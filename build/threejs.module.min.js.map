{"version":3,"file":"threejs.module.min.js","sources":["../src/pointer.js","../src/three.js","../src/cursors/neon/index.js","../src/tools/color.js","../src/glsl/psrdnoise3.glsl","../src/cursors/particles/index.js","../src/tools/canvasTexture.js","../src/glsl/psrdnoise2.glsl","../src/backgrounds/noisy-lines/index.js","../src/glsl/mat3-lookat.glsl","../src/glsl/mat4-compose.glsl","../src/backgrounds/butterflies/index.js","../src/backgrounds/swarm/index.js","../src/backgrounds/fishes/index.js"],"sourcesContent":["import { Vector2 } from 'three'\n\n/**\n * Pointer helper\n * @author Kevin Levron <kevin.levron@gmail.com>\n */\nexport default function (params) {\n  const {\n    domElement,\n    onClick = () => {},\n    onEnter = () => {},\n    onMove = () => {},\n    onLeave = () => {},\n    onDragStart = () => {},\n    onDragMove = () => {},\n    onDragStop = () => {}\n  } = params\n\n  const position = new Vector2()\n  const nPosition = new Vector2()\n  const startPosition = new Vector2()\n  const lastPosition = new Vector2()\n  const delta = new Vector2()\n\n  const obj = { position, nPosition, hover: false, down: false, removeListeners }\n\n  addListeners()\n\n  return obj\n\n  function pointerClick (e) {\n    if (startPosition.distanceTo(position) < 20) {\n      // console.log('pointerClick')\n      updatePosition(e)\n      onClick({ position, nPosition })\n    }\n  }\n\n  function pointerEnter (e) {\n    // console.log('pointerEnter', e)\n    obj.hover = e.pointerType === 'mouse'\n    updatePosition(e)\n    onEnter({ position, nPosition })\n  }\n\n  function pointerDown (e) {\n    // console.log('pointerDown')\n    obj.down = true\n    updatePosition(e)\n    startPosition.copy(position)\n    lastPosition.copy(position)\n    onDragStart({ position, nPosition })\n  }\n\n  function pointerMove (e) {\n    // console.log('pointerMove')\n    updatePosition(e)\n    delta.copy(position).sub(lastPosition)\n    if (obj.down) {\n      onDragMove({ position, nPosition, startPosition, lastPosition, delta })\n    } else {\n      if (!obj.hover) obj.hover = true\n    }\n    onMove({ position, nPosition, startPosition, lastPosition, delta })\n    lastPosition.copy(position)\n  }\n\n  function pointerUp (e) {\n    // console.log('pointerUp')\n    obj.down = false\n    onDragStop()\n  }\n\n  function pointerLeave (e) {\n    // console.log('pointerLeave')\n    if (obj.down) {\n      obj.down = false\n      onDragStop()\n    }\n    obj.hover = false\n    onLeave()\n  }\n\n  function updatePosition (e) {\n    const rect = domElement.getBoundingClientRect()\n    position.x = e.clientX - rect.left\n    position.y = e.clientY - rect.top\n    nPosition.x = (position.x / rect.width) * 2 - 1\n    nPosition.y = -(position.y / rect.height) * 2 + 1\n  }\n\n  function addListeners () {\n    domElement.addEventListener('click', pointerClick)\n    domElement.addEventListener('pointerenter', pointerEnter)\n    domElement.addEventListener('pointerdown', pointerDown)\n    domElement.addEventListener('pointermove', pointerMove)\n    domElement.addEventListener('pointerup', pointerUp)\n    domElement.addEventListener('pointerleave', pointerLeave)\n  }\n\n  function removeListeners () {\n    domElement.removeEventListener('click', pointerClick)\n    domElement.removeEventListener('pointerenter', pointerEnter)\n    domElement.removeEventListener('pointerdown', pointerDown)\n    domElement.removeEventListener('pointermove', pointerMove)\n    domElement.removeEventListener('pointerup', pointerUp)\n    domElement.removeEventListener('pointerleave', pointerLeave)\n  }\n}\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nimport pointer from './pointer'\n\nexport default function (params) {\n  const options = {\n    el: null,\n    canvas: null,\n    eventsEl: null,\n    width: null,\n    height: null,\n    resize: true,\n    alpha: false,\n    antialias: false,\n    orbitControls: false,\n    init () {},\n    initCamera () {},\n    initScene () {},\n    afterResize () {},\n    beforeRender () {},\n    ...params\n  }\n\n  const three = {\n    renderer: null,\n    camera: null,\n    scene: null,\n    pointer: null,\n    width: 0,\n    height: 0,\n    wWidth: 0,\n    wHeight: 0,\n    clock: {\n      startTime: 0,\n      time: 0,\n      elapsed: 0\n    },\n    options\n  }\n\n  let render\n\n  let cameraCtrl\n\n  init()\n\n  return three\n\n  function init () {\n    let canvas\n    if (options.el) {\n      canvas = document.createElement('canvas')\n      options.el.appendChild(canvas)\n    } else if (options.canvas) {\n      canvas = options.canvas\n    } else {\n      throw new Error('Missing parameter : el or canvas is required')\n    }\n\n    options.init?.(three)\n\n    three.renderer = new WebGLRenderer({ canvas, alpha: options.alpha, antialias: options.antialias })\n    options.initRenderer?.(three)\n\n    three.camera = new PerspectiveCamera()\n    three.camera.position.z = 50\n    options.initCamera?.(three)\n\n    if (options.orbitControls) {\n      cameraCtrl = new OrbitControls(three.camera, options.eventsEl ?? three.renderer.domElement)\n      cameraCtrl.enableDamping = true\n      cameraCtrl.dampingFactor = 0.1\n      if (typeof options.orbitControls === 'object') {\n        Object.keys(options.orbitControls).forEach(key => {\n          cameraCtrl[key] = options.orbitControls[key]\n        })\n      }\n    }\n\n    resize()\n    if (options.resize && !options.width && !options.height) {\n      window.addEventListener('resize', resize)\n    }\n\n    three.scene = new Scene()\n    options.initScene?.(three)\n\n    initPointer()\n\n    render = options.render ? options.render : () => { three.renderer.render(three.scene, three.camera) }\n\n    requestAnimationFrame(timestamp => {\n      three.clock.startTime = three.clock.time = timestamp\n      requestAnimationFrame(animate)\n    })\n  }\n\n  function initPointer () {\n    const pointerOptions = {}\n    if (options.onPointerEnter) { pointerOptions.onEnter = options.onPointerEnter }\n    if (options.onPointerMove) { pointerOptions.onMove = options.onPointerMove }\n    if (options.onPointerMove) { pointerOptions.onLeave = options.onPointerLeave }\n    if (Object.keys(pointerOptions).length > 0) {\n      three.pointer = pointer({ domElement: options.eventsEl ?? (options.el ?? options.canvas), ...pointerOptions })\n    }\n  }\n\n  function animate (timestamp) {\n    const { clock } = three\n    clock.elapsed = timestamp - clock.time\n    clock.time = timestamp\n\n    options.beforeRender(three)\n\n    if (cameraCtrl) cameraCtrl.update()\n\n    render(three)\n    requestAnimationFrame(animate)\n  }\n\n  function resize () {\n    if (options.width && options.height) {\n      three.width = options.width\n      three.height = options.height\n    } else if (options.resize === 'window') {\n      three.width = window.innerWidth\n      three.height = window.innerHeight\n    } else {\n      const parent = three.renderer.domElement.parentElement\n      three.width = parent.clientWidth\n      three.height = parent.clientHeight\n    }\n\n    three.renderer.setSize(three.width, three.height)\n    three.camera.aspect = three.width / three.height\n    three.camera.updateProjectionMatrix()\n    if (three.camera instanceof PerspectiveCamera) {\n      const wsize = getCameraViewSize()\n      three.wWidth = wsize[0]; three.wHeight = wsize[1]\n    } else {\n      three.wWidth = three.camera.top - three.camera.bottom\n      three.wHeight = three.camera.right - three.camera.left\n    }\n    options.afterResize?.(three)\n  }\n\n  function getCameraViewSize () {\n    const vFOV = (three.camera.fov * Math.PI) / 180\n    const h = 2 * Math.tan(vFOV / 2) * Math.abs(three.camera.position.z)\n    const w = h * three.camera.aspect\n    return [w, h]\n  }\n}\n\nexport function commonConfig (params) {\n  const config = {}\n  const keys = ['el', 'canvas', 'eventsEl', 'width', 'height', 'resize', 'orbitControls']\n  keys.forEach(key => {\n    if (params[key] !== undefined) config[key] = params[key]\n  })\n  return config\n}\n\nexport function initLights (scene, lightsConfig) {\n  const lights = []\n  if (Array.isArray(lightsConfig) && lightsConfig.length > 0) {\n    let light\n    lightsConfig.forEach(lightConfig => {\n      switch (lightConfig.type) {\n        case 'ambient':\n          light = new AmbientLight(...lightConfig.params)\n          break\n        case 'directional':\n          light = new DirectionalLight(...lightConfig.params)\n          break\n        case 'point':\n          light = new PointLight(...lightConfig.params)\n          break\n        default:\n          console.error(`Unknown light type ${lightConfig.type}`)\n      }\n      if (light) {\n        if (typeof lightConfig.props === 'object') {\n          Object.keys(lightConfig.props).forEach(key => {\n            if (key === 'position') {\n              light.position.set(...lightConfig.props[key])\n            } else light[key] = lightConfig.props[key]\n          })\n        }\n        scene.add(light)\n        lights.push(light)\n      }\n    })\n  }\n  return lights\n}\n","import { Color, Mesh, OrthographicCamera, PlaneGeometry, ShaderMaterial, SplineCurve, Vector2, Vector3 } from 'three'\nimport three from '../../three'\n\nconst defaultConfig = {\n  shaderPoints: 8,\n  curvePoints: 80,\n  curveLerp: 0.75,\n  radius1: 3,\n  radius2: 5,\n  velocityTreshold: 10,\n  sleepRadiusX: 150,\n  sleepRadiusY: 150,\n  sleepTimeCoefX: 0.0025,\n  sleepTimeCoefY: 0.0025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const points = new Array(config.curvePoints).fill(0).map(() => new Vector2())\n  const spline = new SplineCurve(points)\n\n  const velocity = new Vector3()\n  const velocityTarget = new Vector3()\n\n  const uRatio = { value: new Vector2() }\n  const uSize = { value: new Vector2() }\n  const uPoints = { value: new Array(config.shaderPoints).fill(0).map(() => new Vector2()) }\n  const uColor = { value: new Color(0xff00ff) }\n\n  let material\n  let plane\n  let hover = false\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: false,\n    initCamera (three) {\n      three.camera = new OrthographicCamera()\n    },\n    initScene ({ scene }) {\n      const geometry = new PlaneGeometry(2, 2)\n      material = new ShaderMaterial({\n        uniforms: { uRatio, uSize, uPoints, uColor },\n        defines: {\n          SHADER_POINTS: config.shaderPoints\n        },\n        vertexShader: `\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = vec4(position, 1.0);\n          }\n        `,\n        fragmentShader: `\n          // https://www.shadertoy.com/view/wdy3DD\n          // https://www.shadertoy.com/view/MlKcDD\n          // Signed distance to a quadratic bezier\n          float sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C) {\n            vec2 a = B - A;\n            vec2 b = A - 2.0*B + C;\n            vec2 c = a * 2.0;\n            vec2 d = A - pos;\n            float kk = 1.0 / dot(b,b);\n            float kx = kk * dot(a,b);\n            float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n            float kz = kk * dot(d,a);\n            float res = 0.0;\n            float p = ky - kx*kx;\n            float p3 = p*p*p;\n            float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n            float h = q*q + 4.0*p3;\n            if(h >= 0.0){\n              h = sqrt(h);\n              vec2 x = (vec2(h, -h) - q) / 2.0;\n              vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n              float t = uv.x + uv.y - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 1 root\n              vec2 qos = d + (c + b*t)*t;\n              res = length(qos);\n            } else {\n              float z = sqrt(-p);\n              float v = acos( q/(p*z*2.0) ) / 3.0;\n              float m = cos(v);\n              float n = sin(v)*1.732050808;\n              vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 3 roots\n              vec2 qos = d + (c + b*t.x)*t.x;\n              float dis = dot(qos,qos);\n              res = dis;\n              qos = d + (c + b*t.y)*t.y;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              qos = d + (c + b*t.z)*t.z;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              res = sqrt( res );\n            }\n            return res;\n          }\n\n          uniform vec2 uRatio;\n          uniform vec2 uSize;\n          uniform vec2 uPoints[SHADER_POINTS];\n          uniform vec3 uColor;\n          varying vec2 vUv;\n          void main() {\n            float intensity = 1.0;\n            float radius = 0.015;\n\n            vec2 pos = (vUv - 0.5) * uRatio;\n\n            vec2 c = (uPoints[0] + uPoints[1]) / 2.0;\n            vec2 c_prev;\n            float dist = 10000.0;\n            for(int i = 0; i < SHADER_POINTS - 1; i++){\n              c_prev = c;\n              c = (uPoints[i] + uPoints[i + 1]) / 2.0;\n              dist = min(dist, sdBezier(pos, c_prev, uPoints[i], c));\n            }\n            dist = max(0.0, dist);\n\n            float glow = pow(uSize.y / dist, intensity);\n            vec3 col = vec3(0.0);\n            col += 10.0 * vec3(smoothstep(uSize.x, 0.0, dist));\n            col += glow * uColor;\n\n            // Tone mapping\n            col = 1.0 - exp(-col);\n            col = pow(col, vec3(0.4545));\n  \n            gl_FragColor = vec4(col, 1.0);\n          }\n        `\n      })\n      plane = new Mesh(geometry, material)\n      scene.add(plane)\n    },\n    afterResize ({ width, height }) {\n      uSize.value.set(config.radius1, config.radius2)\n      if (width >= height) {\n        uRatio.value.set(1, height / width)\n        uSize.value.multiplyScalar(1 / width)\n      } else {\n        uRatio.value.set(width / height, 1)\n        uSize.value.multiplyScalar(1 / height)\n      }\n    },\n    beforeRender ({ clock, width, height, wWidth }) {\n      for (let i = 1; i < config.curvePoints; i++) {\n        points[i].lerp(points[i - 1], config.curveLerp)\n      }\n      for (let i = 0; i < config.shaderPoints; i++) {\n        spline.getPoint(i / (config.shaderPoints - 1), uPoints.value[i])\n      }\n\n      if (!hover) {\n        const t1 = clock.time * config.sleepTimeCoefX\n        const t2 = clock.time * config.sleepTimeCoefY\n        const cos = Math.cos(t1)\n        const sin = Math.sin(t2)\n        const r1 = config.sleepRadiusX * wWidth / width\n        const r2 = config.sleepRadiusY * wWidth / width\n        const x = r1 * cos\n        const y = r2 * sin\n        spline.points[0].set(x, y)\n        uColor.value.r = 0.5 + 0.5 * Math.cos(clock.time * 0.0015)\n        uColor.value.g = 0\n        uColor.value.b = 1 - uColor.value.r\n      } else {\n        uColor.value.r = velocity.z\n        uColor.value.g = 0\n        uColor.value.b = 1 - velocity.z\n        velocity.multiplyScalar(0.95)\n      }\n    },\n    onPointerMove ({ nPosition, delta }) {\n      hover = true\n      const x = (0.5 * nPosition.x) * uRatio.value.x\n      const y = (0.5 * nPosition.y) * uRatio.value.y\n      spline.points[0].set(x, y)\n\n      velocityTarget.x = Math.min(velocity.x + Math.abs(delta.x) / config.velocityTreshold, 1)\n      velocityTarget.y = Math.min(velocity.y + Math.abs(delta.y) / config.velocityTreshold, 1)\n      velocityTarget.z = Math.sqrt(velocityTarget.x * velocityTarget.x + velocityTarget.y * velocityTarget.y)\n      velocity.lerp(velocityTarget, 0.05)\n    },\n    onPointerLeave () {\n      hover = false\n    }\n  })\n\n  return { config }\n}\n","import { Color } from 'three'\n\nexport function colorScale (colors) {\n  let range = []\n  setColors(colors)\n\n  const dummy = new Color()\n\n  return { setColors, getColorAt }\n\n  function setColors (colors) {\n    range = []\n    colors.forEach(color => {\n      range.push(new Color(color))\n    })\n  }\n\n  function getColorAt (progress) {\n    const p = Math.max(0, Math.min(1, progress)) * (colors.length - 1)\n    const i1 = Math.floor(p)\n    const c1 = range[i1]\n    if (i1 >= colors.length - 1) {\n      return c1.clone()\n    }\n    const p1 = p - i1\n    const c2 = range[i1 + 1]\n\n    dummy.r = c1.r + p1 * (c2.r - c1.r)\n    dummy.g = c1.g + p1 * (c2.g - c1.g)\n    dummy.b = c1.b + p1 * (c2.b - c1.b)\n    return dummy.clone()\n  }\n}\n","//\n// psrdnoise3.glsl\n//\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\n// and Ian McEwan (ijm567@gmail.com)\n// Version 2021-12-02, published under the MIT license (see below)\n//\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n//\n\n//\n// Periodic (tiling) 3-D simplex noise (tetrahedral lattice gradient noise)\n// with rotating gradients and analytic derivatives.\n//\n// This is (yet) another variation on simplex noise. Unlike previous\n// implementations, the grid is axis-aligned to permit rectangular tiling.\n// The noise pattern can be made to tile seamlessly to any integer periods\n// up to 289 units in the x, y and z directions. Specifying a longer\n// period than 289 will result in errors in the noise field.\n//\n// This particular version of 3-D noise also implements animation by rotating\n// the generating gradient at each lattice point around a pseudo-random axis.\n// The rotating gradients give the appearance of a swirling motion, and\n// can serve a similar purpose for animation as motion along the fourth\n// dimension in 4-D noise. \n//\n// The rotating gradients in conjunction with the built-in ability to\n// compute exact analytic derivatives allow for \"flow noise\" effects\n// as presented by Ken Perlin and Fabrice Neyret.\n//\n\n// Use Perlin's rotated grid instead of the new tiling grid?\n// Enabling this adds about 1% to the execution time and\n// requires all periods to be multiples of 3. Other\n// integer periods can be specified, but when not evenly\n// divisible by 3, the actual period will be 3 times longer.\n// Take care not to overstep the maximum allowed period (288).\n//#define PERLINGRID\n\n// Enable faster gradient rotations?\n// Enabling this saves about 10% on execution time,\n// but the function will not run faster for alpha = 0.\n//#define FASTROTATION\n\n\n// Permutation polynomial for the hash value\nvec4 permute(vec4 x) {\n     vec4 xm = mod(x, 289.0);\n     return mod(((xm*34.0)+10.0)*xm, 289.0);\n}\n\n//\n// 3-D tiling simplex noise with rotating gradients and first order\n// analytical derivatives.\n// \"vec3 x\" is the point (x,y,z) to evaluate\n// \"vec3 period\" is the desired periods along x,y,z, up to 289.\n// (If Perlin's grid is used, multiples of 3 up to 288 are allowed.)\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\n// The \"float\" return value is the noise value, and\n// the \"out vec3 gradient\" argument returns the x,y,z partial derivatives.\n//\n// The function executes 15-20% faster if alpha is constant == 0.0\n// across all fragments being executed in parallel.\n// (This speedup will not happen if FASTROTATION is enabled. Do not specify\n// FASTROTATION if you are not actually going to use the rotation.)\n//\n// Setting any period to 0.0 or a negative value will skip the periodic\n// wrap for that dimension. Setting all periods to 0.0 makes the function\n// execute 10-15% faster.\n//\n// Not using the return value for the gradient will make the compiler\n// eliminate the code for computing it. This speeds up the function by\n// around 10%.\n//\nfloat psrdnoise(vec3 x, vec3 period, float alpha, out vec3 gradient)\n{\n\n#ifndef PERLINGRID\n  // Transformation matrices for the axis-aligned simplex grid\n  const mat3 M = mat3(0.0, 1.0, 1.0,\n                      1.0, 0.0, 1.0,\n                      1.0, 1.0, 0.0);\n\n  const mat3 Mi = mat3(-0.5, 0.5, 0.5,\n                        0.5,-0.5, 0.5,\n                        0.5, 0.5,-0.5);\n#endif\n\n  vec3 uvw;\n\n  // Transform to simplex space (tetrahedral grid)\n#ifndef PERLINGRID\n  // Use matrix multiplication, let the compiler optimise\n  uvw = M * x;\n#else\n  // Optimised transformation to uvw (slightly faster than\n  // the equivalent matrix multiplication on most platforms)\n  uvw = x + dot(x, vec3(1.0/3.0));\n#endif\n\n  // Determine which simplex we're in, i0 is the \"base corner\"\n  vec3 i0 = floor(uvw);\n  vec3 f0 = fract(uvw); // coords within \"skewed cube\"\n\n  // To determine which simplex corners are closest, rank order the\n  // magnitudes of u,v,w, resolving ties in priority order u,v,w,\n  // and traverse the four corners from largest to smallest magnitude.\n  // o1, o2 are offsets in simplex space to the 2nd and 3rd corners.\n  vec3 g_ = step(f0.xyx, f0.yzz); // Makes comparison \"less-than\"\n  vec3 l_ = 1.0 - g_;             // complement is \"greater-or-equal\"\n  vec3 g = vec3(l_.z, g_.xy);\n  vec3 l = vec3(l_.xy, g_.z);\n  vec3 o1 = min( g, l );\n  vec3 o2 = max( g, l );\n\n  // Enumerate the remaining simplex corners\n  vec3 i1 = i0 + o1;\n  vec3 i2 = i0 + o2;\n  vec3 i3 = i0 + vec3(1.0);\n\n  vec3 v0, v1, v2, v3;\n\n  // Transform the corners back to texture space\n#ifndef PERLINGRID\n  v0 = Mi * i0;\n  v1 = Mi * i1;\n  v2 = Mi * i2;\n  v3 = Mi * i3;\n#else\n  // Optimised transformation (mostly slightly faster than a matrix)\n  v0 = i0 - dot(i0, vec3(1.0/6.0));\n  v1 = i1 - dot(i1, vec3(1.0/6.0));\n  v2 = i2 - dot(i2, vec3(1.0/6.0));\n  v3 = i3 - dot(i3, vec3(1.0/6.0));\n#endif\n\n  // Compute vectors to each of the simplex corners\n  vec3 x0 = x - v0;\n  vec3 x1 = x - v1;\n  vec3 x2 = x - v2;\n  vec3 x3 = x - v3;\n\n  if(any(greaterThan(period, vec3(0.0)))) {\n    // Wrap to periods and transform back to simplex space\n    vec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);\n    vec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);\n    vec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);\n\t// Wrap to periods where specified\n\tif(period.x > 0.0) vx = mod(vx, period.x);\n\tif(period.y > 0.0) vy = mod(vy, period.y);\n\tif(period.z > 0.0) vz = mod(vz, period.z);\n    // Transform back\n#ifndef PERLINGRID\n    i0 = M * vec3(vx.x, vy.x, vz.x);\n    i1 = M * vec3(vx.y, vy.y, vz.y);\n    i2 = M * vec3(vx.z, vy.z, vz.z);\n    i3 = M * vec3(vx.w, vy.w, vz.w);\n#else\n    v0 = vec3(vx.x, vy.x, vz.x);\n    v1 = vec3(vx.y, vy.y, vz.y);\n    v2 = vec3(vx.z, vy.z, vz.z);\n    v3 = vec3(vx.w, vy.w, vz.w);\n    // Transform wrapped coordinates back to uvw\n    i0 = v0 + dot(v0, vec3(1.0/3.0));\n    i1 = v1 + dot(v1, vec3(1.0/3.0));\n    i2 = v2 + dot(v2, vec3(1.0/3.0));\n    i3 = v3 + dot(v3, vec3(1.0/3.0));\n#endif\n\t// Fix rounding errors\n    i0 = floor(i0 + 0.5);\n    i1 = floor(i1 + 0.5);\n    i2 = floor(i2 + 0.5);\n    i3 = floor(i3 + 0.5);\n  }\n\n  // Compute one pseudo-random hash value for each corner\n  vec4 hash = permute( permute( permute( \n              vec4(i0.z, i1.z, i2.z, i3.z ))\n            + vec4(i0.y, i1.y, i2.y, i3.y ))\n            + vec4(i0.x, i1.x, i2.x, i3.x ));\n\n  // Compute generating gradients from a Fibonacci spiral on the unit sphere\n  vec4 theta = hash * 3.883222077;  // 2*pi/golden ratio\n  vec4 sz    = hash * -0.006920415 + 0.996539792; // 1-(hash+0.5)*2/289\n  vec4 psi   = hash * 0.108705628 ; // 10*pi/289, chosen to avoid correlation\n\n  vec4 Ct = cos(theta);\n  vec4 St = sin(theta);\n  vec4 sz_prime = sqrt( 1.0 - sz*sz ); // s is a point on a unit fib-sphere\n\n  vec4 gx, gy, gz;\n\n  // Rotate gradients by angle alpha around a pseudo-random ortogonal axis\n#ifdef FASTROTATION\n  // Fast algorithm, but without dynamic shortcut for alpha = 0\n  vec4 qx = St;         // q' = norm ( cross(s, n) )  on the equator\n  vec4 qy = -Ct; \n  vec4 qz = vec4(0.0);\n\n  vec4 px =  sz * qy;   // p' = cross(q, s)\n  vec4 py = -sz * qx;\n  vec4 pz = sz_prime;\n\n  psi += alpha;         // psi and alpha in the same plane\n  vec4 Sa = sin(psi);\n  vec4 Ca = cos(psi);\n\n  gx = Ca * px + Sa * qx;\n  gy = Ca * py + Sa * qy;\n  gz = Ca * pz + Sa * qz;\n#else\n  // Slightly slower algorithm, but with g = s for alpha = 0, and a\n  // useful conditional speedup for alpha = 0 across all fragments\n  if(alpha != 0.0) {\n    vec4 Sp = sin(psi);          // q' from psi on equator\n    vec4 Cp = cos(psi);\n\n    vec4 px = Ct * sz_prime;     // px = sx\n    vec4 py = St * sz_prime;     // py = sy\n    vec4 pz = sz;\n\n    vec4 Ctp = St*Sp - Ct*Cp;    // q = (rotate( cross(s,n), dot(s,n))(q')\n    vec4 qx = mix( Ctp*St, Sp, sz);\n    vec4 qy = mix(-Ctp*Ct, Cp, sz);\n    vec4 qz = -(py*Cp + px*Sp);\n\n    vec4 Sa = vec4(sin(alpha));       // psi and alpha in different planes\n    vec4 Ca = vec4(cos(alpha));\n\n    gx = Ca * px + Sa * qx;\n    gy = Ca * py + Sa * qy;\n    gz = Ca * pz + Sa * qz;\n  }\n  else {\n    gx = Ct * sz_prime;  // alpha = 0, use s directly as gradient\n    gy = St * sz_prime;\n    gz = sz;  \n  }\n#endif\n\n  // Reorganize for dot products below\n  vec3 g0 = vec3(gx.x, gy.x, gz.x);\n  vec3 g1 = vec3(gx.y, gy.y, gz.y);\n  vec3 g2 = vec3(gx.z, gy.z, gz.z);\n  vec3 g3 = vec3(gx.w, gy.w, gz.w);\n\n  // Radial decay with distance from each simplex corner\n  vec4 w = 0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n  w = max(w, 0.0);\n  vec4 w2 = w * w;\n  vec4 w3 = w2 * w;\n\n  // The value of the linear ramp from each of the corners\n  vec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));\n\n  // Multiply by the radial decay and sum up the noise value\n  float n = dot(w3, gdotx);\n\n  // Compute the first order partial derivatives\n  vec4 dw = -6.0 * w2 * gdotx;\n  vec3 dn0 = w3.x * g0 + dw.x * x0;\n  vec3 dn1 = w3.y * g1 + dw.y * x1;\n  vec3 dn2 = w3.z * g2 + dw.z * x2;\n  vec3 dn3 = w3.w * g3 + dw.w * x3;\n  gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);\n\n  // Scale the return value to fit nicely into the range [-1,1]\n  return 39.5 * n;\n}","import {\n    AdditiveBlending,\n    BufferAttribute,\n    BufferGeometry,\n    Color,\n    HalfFloatType,\n    MathUtils,\n    Points,\n    ShaderMaterial,\n    Vector2,\n    SphereGeometry,\n    BackSide,\n    Mesh\n} from \"three\";\nimport {GPUComputationRenderer} from \"three/examples/jsm/misc/GPUComputationRenderer.js\";\nimport three from \"../../three\";\nimport {colorScale} from \"../../tools/color\";\nimport psrdnoise from \"../../glsl/psrdnoise3.glsl\";\n\nconst {randFloat: rnd, randFloatSpread: rndFS} = MathUtils;\n\nconst defaultConfig = {\n    gpgpuSize: 256,\n    centerColor:0x056C71,\n    edgeColor:0x003234,\n    colors: [0xF87A2C, 0xF87A2C, 0xF87A2C],\n    color: 0xF87A2C,\n    coordScale: 1.5,\n    noiseIntensity: 0.001,\n    noiseTimeCoef: 0.0001,\n    pointSize: 5,\n    pointDecay: 0.005,\n    sleepRadiusX: 250,\n    sleepRadiusY: 250,\n    sleepTimeCoefX: 0.001,\n    sleepTimeCoefY: 0.002,\n    hover: 0,\n    position:[{ x: 0, y: 0, time: 1000 }]\n};\n\nexport default function (params) {\n    const config = {...defaultConfig, ...params};\n\n    const WIDTH = config.gpgpuSize;\n    const COUNT = WIDTH * WIDTH;\n\n    let gpu;\n    let dtPosition, dtVelocity;\n    let velocityVariable, positionVariable;\n\n    const uTime = {value: 0};\n    const uCoordScale = {value: config.coordScale};\n    const uNoiseIntensity = {value: config.noiseIntensity};\n    const uPointSize = {value: config.pointSize};\n    const uPointDecay = {value: config.pointDecay};\n    const uColor = {value: new Color(config.color)};\n    const uMouse = {value: new Vector2()};\n    const uMouseDirection = {value: new Vector2()};\n    const uniforms = {uTime, uCoordScale, uNoiseIntensity, uPointSize, uPointDecay, uColor, uMouse, uMouseDirection};\n\n    let geometry, material, mesh;\n\n    let hover = config.hover;\n    const mouseTarget = new Vector2();\n\n    var mindex = 0;\n\n    const changes =  config.position;\n    let mchange = {x:0,y:0}\n\n\n\n    three({\n        ...commonConfig(params),\n        alpha: true, // Enable transparency for the renderer\n        antialias: false,\n        initRenderer({renderer}) {\n            renderer.setClearColor(0x000000, 0); // Make the canvas background transparent\n            initGPU(renderer);\n        },\n        initScene({scene}) {\n            initParticles();\n            scene.background = null;\n            scene.add(mesh);\n\n        },\n        beforeRender({width, wWidth, wHeight, clock, pointer}) {\n            if (!hover) {\n\n                // Update mouseTarget based on the latest change\n                mouseTarget.x = mchange.x ?? 0;\n                mouseTarget.y = mchange.y ?? 0;\n\n            } else {\n                // When hovering, update the mouse target based on pointer position\n                mouseTarget.x = pointer.nPosition.x * 0.5 * wWidth;\n                mouseTarget.y = pointer.nPosition.y * 0.5 * wHeight;\n            }\n\n            // Smooth transition of mouse position with lerp\n            uMouse.value.lerp(mouseTarget, 0.05);\n\n            // Update the time and compute GPU operations\n            uTime.value = clock.time * config.noiseTimeCoef;\n            gpu.compute();\n            material.uniforms.texturePosition.value = gpu.getCurrentRenderTarget(positionVariable).texture;\n            material.uniforms.textureVelocity.value = gpu.getCurrentRenderTarget(velocityVariable).texture;\n        },\n\n        onPointerMove({delta}) {\n            //hover = true\n            uMouseDirection.value.copy(delta);\n        },\n        onPointerLeave() {\n            //hover = false\n        },\n    });\n\n    function mchangef() {\n        // Ensure the index is within bounds\n        if (mindex < changes.length) {\n            const change = changes[mindex];\n            mchange.x = change.x;\n            mchange.y = change.y;\n\n            // Simulate the mousemove event after the specified delay\n            setTimeout(() => {\n                console.log(mindex);\n\n                // Simulate a mousemove event at the new pixel coordinates\n                const event = new MouseEvent('mousemove', {\n                    clientX: change.x,  // X position in pixels\n                    clientY: change.y,  // Y position in pixels\n                });\n\n                // Dispatch the event to simulate the movement\n                document.dispatchEvent(event);\n\n                // Increment the index and recursively call mchangef for the next change\n                mindex++;\n                mchangef(); // Continue processing the next index\n            }, change.time); // Delay based on the `time` value in the `change`\n        }\n    }\n\n    // Start the mouse movement simulation\n    mchangef();\n\n\n    return {config, uniforms};\n\n    /**\n     */\n    function initGPU(renderer) {\n        gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer);\n      /*  if (!renderer.capabilities.isWebGL2) {\n            gpu.setDataType(HalfFloatType);\n        }\n*/\n        dtPosition = gpu.createTexture();\n        dtVelocity = gpu.createTexture();\n        initTextures(dtPosition, dtVelocity);\n\n        velocityVariable = gpu.addVariable(\"textureVelocity\", `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uNoiseIntensity;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        if (pos.w < 0.0) {\n          vel.x = 0.0;\n          vel.y = 0.0;\n          vel.z = 0.0;\n        } else {\n          vec3 grad;\n          vec3 p = vec3(0.0);\n          float n = psrdnoise(pos.xyz * uCoordScale, p, uTime, grad);\n          vel.xyz += grad * uNoiseIntensity * pos.w;\n        }\n        gl_FragColor = vel;\n      }\n    `, dtVelocity);\n\n        positionVariable = gpu.addVariable(\"texturePosition\", `\n      uniform float uPointDecay;\n      uniform vec2 uMouse;\n      uniform vec2 uMouseDirection;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        if (pos.w < 0.0) { pos.w = vel.w; }\n        pos.w -= uPointDecay;\n        if (pos.w <= 0.0) {\n          pos.xy = uMouse.xy;\n          pos.z = 0.0;\n        } else {\n          pos.xyz += vel.xyz;\n        }\n        gl_FragColor = pos;\n      }\n    `, dtPosition);\n\n        gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable]);\n        gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable]);\n\n        Object.keys(uniforms).forEach(key => {\n            velocityVariable.material.uniforms[key] = uniforms[key];\n            positionVariable.material.uniforms[key] = uniforms[key];\n        });\n\n        const error = gpu.init();\n        if (error !== null) {\n            console.error(error);\n        }\n    }\n\n    /**\n     */\n    function initParticles() {\n        geometry = new BufferGeometry();\n        const positions = new Float32Array(COUNT * 3);\n        const uvs = new Float32Array(COUNT * 2);\n        const colors = new Float32Array(COUNT * 3);\n\n        for (let i = 0; i < COUNT * 3; i += 3) {\n            positions[i] = 0;\n            positions[i + 1] = 0;\n            positions[i + 2] = 0;\n        }\n\n        let index = 0;\n        for (let j = 0; j < WIDTH; j++) {\n            for (let i = 0; i < WIDTH; i++) {\n                uvs[index++] = i / (WIDTH - 1);\n                uvs[index++] = j / (WIDTH - 1);\n            }\n        }\n\n        const cscale = colorScale(config.colors);\n        for (let i = 0; i < COUNT * 3; i += 3) {\n            const color = cscale.getColorAt(Math.random());\n            colors[i] = color.r;\n            colors[i + 1] = color.g;\n            colors[i + 2] = color.b;\n        }\n\n        geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n        geometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2));\n        geometry.setAttribute(\"color\", new BufferAttribute(colors, 3));\n\n        material = new ShaderMaterial({\n            blending: AdditiveBlending,\n            depthTest: false,\n            transparent: true,\n            vertexColors: true,\n            uniforms: {\n                texturePosition: {value: null},\n                textureVelocity: {value: null},\n                uPointSize,\n                uColor\n            },\n            vertexShader: `\n        uniform sampler2D texturePosition;\n        uniform sampler2D textureVelocity;\n        uniform float uPointSize;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          vCol = color;\n          vPos = texture2D(texturePosition, uv);\n          vVel = texture2D(textureVelocity, uv);\n          vec4 mvPosition = modelViewMatrix * vec4(vPos.xyz, 1.0);\n          // gl_PointSize = smoothstep(0.0, 2.0, vPos.w) * uPointSize;\n          gl_PointSize = vPos.w * (vVel.w + 0.5) * uPointSize;\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n            fragmentShader: `\n        uniform vec3 uColor;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          float dist = length(gl_PointCoord - 0.5);\n          if (dist > 0.5) discard;\n          // float a = smoothstep(0.0, 1.0, vPos.w);\n          gl_FragColor = vec4(mix(vCol, uColor, vPos.w), vPos.w);\n        }\n      `\n        });\n\n        mesh = new Points(geometry, material);\n        mesh.matrixAutoUpdate = false;\n        mesh.updateMatrix();\n    }\n\n    /**\n     */\n    function initTextures(texturePosition, textureVelocity) {\n        const posArray = texturePosition.image.data;\n        const velArray = textureVelocity.image.data;\n        for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n            posArray[k + 0] = rndFS(1);\n            posArray[k + 1] = rndFS(1);\n            posArray[k + 2] = -100000;\n            posArray[k + 3] = rnd(0.1, 1);\n\n            velArray[k + 0] = 0; // rndFS(0.2)\n            velArray[k + 1] = 0; // rndFS(0.2)\n            velArray[k + 2] = 0; // rndFS(0.2)\n            velArray[k + 3] = rnd(0.1, 1);\n        }\n    }\n}\n\n/**\n */\nfunction commonConfig(params) {\n    const config = {};\n    const keys = [\"el\", \"canvas\", \"width\", \"height\", \"resize\"];\n    keys.forEach(key => {\n        if (params[key] !== undefined) config[key] = params[key];\n    });\n    return config;\n}\n","import { CanvasTexture } from 'three'\n\nconst defaultConfig = {\n  width: 256,\n  height: 256\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const canvas = document.createElement('canvas')\n  canvas.width = config.width\n  canvas.height = config.height\n\n  const ctx = canvas.getContext('2d')\n\n  const texture = new CanvasTexture(ctx.canvas)\n\n  return { canvas, ctx, texture }\n}\n","//\n// psrdnoise2.glsl\n//\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\n// and Ian McEwan (ijm567@gmail.com)\n// Version 2021-12-02, published under the MIT license (see below)\n//\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n//\n\n//\n// Periodic (tiling) 2-D simplex noise (hexagonal lattice gradient noise)\n// with rotating gradients and analytic derivatives.\n//\n// This is (yet) another variation on simplex noise. Unlike previous\n// implementations, the grid is axis-aligned and slightly stretched in\n// the y direction to permit rectangular tiling.\n// The noise pattern can be made to tile seamlessly to any integer period\n// in x and any even integer period in y. Odd periods may be specified\n// for y, but then the actual tiling period will be twice that number.\n//\n// The rotating gradients give the appearance of a swirling motion, and\n// can serve a similar purpose for animation as motion along z in 3-D\n// noise. The rotating gradients in conjunction with the analytic\n// derivatives allow for \"flow noise\" effects as presented by Ken\n// Perlin and Fabrice Neyret.\n//\n\n\n//\n// 2-D tiling simplex noise with rotating gradients and analytical derivative.\n// \"vec2 x\" is the point (x,y) to evaluate,\n// \"vec2 period\" is the desired periods along x and y, and\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\n// The \"float\" return value is the noise value, and\n// the \"out vec2 gradient\" argument returns the x,y partial derivatives.\n//\n// Setting either period to 0.0 or a negative value will skip the wrapping\n// along that dimension. Setting both periods to 0.0 makes the function\n// execute about 15% faster.\n//\n// Not using the return value for the gradient will make the compiler\n// eliminate the code for computing it. This speeds up the function\n// by 10-15%.\n//\n// The rotation by alpha uses one single addition. Unlike the 3-D version\n// of psrdnoise(), setting alpha == 0.0 gives no speedup.\n//\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient) {\n\n\t// Transform to simplex space (axis-aligned hexagonal grid)\n\tvec2 uv = vec2(x.x + x.y*0.5, x.y);\n\n\t// Determine which simplex we're in, with i0 being the \"base\"\n\tvec2 i0 = floor(uv);\n\tvec2 f0 = fract(uv);\n\t// o1 is the offset in simplex space to the second corner\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\n\t// Enumerate the remaining simplex corners\n\tvec2 i1 = i0 + o1;\n\tvec2 i2 = i0 + vec2(1.0, 1.0);\n\n\t// Transform corners back to texture space\n\tvec2 v0 = vec2(i0.x - i0.y * 0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y * 0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\n\t// Compute vectors from v to each of the simplex corners\n\tvec2 x0 = x - v0;\n\tvec2 x1 = x - v1;\n\tvec2 x2 = x - v2;\n\n\tvec3 iu, iv;\n\tvec3 xw, yw;\n\n\t// Wrap to periods, if desired\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\t// Transform back to simplex space and fix rounding errors\n\t\tiu = floor(xw + 0.5*yw + 0.5);\n\t\tiv = floor(yw + 0.5);\n\t} else { // Shortcut if neither x nor y periods are specified\n\t\tiu = vec3(i0.x, i1.x, i2.x);\n\t\tiv = vec3(i0.y, i1.y, i2.y);\n\t}\n\n\t// Compute one pseudo-random hash value for each corner\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\n\t// Pick a pseudo-random angle and add the desired rotation\n\tvec3 psi = hash * 0.07482 + alpha;\n\tvec3 gx = cos(psi);\n\tvec3 gy = sin(psi);\n\n\t// Reorganize for dot products below\n\tvec2 g0 = vec2(gx.x,gy.x);\n\tvec2 g1 = vec2(gx.y,gy.y);\n\tvec2 g2 = vec2(gx.z,gy.z);\n\n\t// Radial decay with distance from each simplex corner\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0);\n\tvec3 w2 = w * w;\n\tvec3 w4 = w2 * w2;\n\n\t// The value of the linear ramp from each of the corners\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\n\t// Multiply by the radial decay and sum up the noise value\n\tfloat n = dot(w4, gdotx);\n\n\t// Compute the first order partial derivatives\n\tvec3 w3 = w2 * w;\n\tvec3 dw = -8.0 * w3 * gdotx;\n\tvec2 dn0 = w4.x * g0 + dw.x * x0;\n\tvec2 dn1 = w4.y * g1 + dw.y * x1;\n\tvec2 dn2 = w4.z * g2 + dw.z * x2;\n\tgradient = 10.9 * (dn0 + dn1 + dn2);\n\n\t// Scale the return value to fit nicely into the range [-1,1]\n\treturn 10.9 * n;\n}","import { Mesh, PlaneGeometry, ShaderMaterial, Vector2 } from 'three'\nimport three from '../../three'\nimport useCanvasTexture from '../../tools/canvasTexture'\nimport psrdnoise from '../../glsl/psrdnoise2.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst defaultConfig = {\n  colors: [0xffffff, 0x000000],\n  minStroke: 5,\n  maxStroke: 5,\n  timeCoef: 0.0005,\n  coordScale: 2,\n  displacementScale: 0.002,\n  mouseScale: 0.25,\n  mouseLerp: 0.025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const canvasTexture = useCanvasTexture({ width: 1, height: 4096 })\n  drawTexture()\n\n  const uniforms = {\n    uMap: { value: canvasTexture.texture },\n    uTime: { value: 0 },\n    uCoordScale: { value: config.coordScale },\n    uDisplacementScale: { value: config.displacementScale },\n    uMouse: { value: new Vector2() }\n  }\n\n  const geometry = new PlaneGeometry()\n\n  const material = new ShaderMaterial({\n    uniforms,\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uMap;\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uDisplacementScale;\n      uniform vec2 uMouse;\n      varying vec2 vUv;\n      ${psrdnoise}\n      void main() {\n        vec2 p = vec2(0.0);\n        vec2 grad;\n        float n = psrdnoise(vUv * uCoordScale + uMouse, p, uTime, grad);\n        // grad *= uCoordScale;\n        vec2 uv = vUv + uDisplacementScale * grad;\n        gl_FragColor = texture2D(uMap, uv.yx);\n      }\n    `\n  })\n\n  const mesh = new Mesh(geometry, material)\n\n  const mouseTarget = new Vector2()\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: true,\n    initScene ({ camera, scene, wWidth, wHeight }) {\n      mesh.scale.set(wWidth * 2, wHeight * 2, 1)\n      scene.add(mesh)\n\n      camera.position.set(0, -30, 7)\n      camera.lookAt(0, -19, 0)\n    },\n    beforeRender ({ clock }) {\n      uniforms.uTime.value = clock.time * config.timeCoef\n      uniforms.uMouse.value.lerp(mouseTarget, config.mouseLerp)\n    },\n    onPointerMove ({ nPosition }) {\n      mouseTarget.set(-nPosition.x, nPosition.y).multiplyScalar(config.mouseScale)\n    },\n    onPointerLeave () {\n      mouseTarget.set(0, 0)\n    }\n  })\n\n  return { config, uniforms, drawTexture }\n\n  function drawTexture () {\n    const ctx = canvasTexture.ctx\n    ctx.lineWidth = 0\n\n    const { width, height } = canvasTexture.canvas\n    const cscale = colorScale(config.colors)\n\n    let y = 0\n    let dy\n    while (y < height) {\n      dy = config.minStroke + Math.random() * (config.maxStroke - config.minStroke)\n\n      // ctx.strokeStyle = cscale.getColorAt(Math.random()).getStyle()\n      // ctx.lineWidth = dy + 1\n      // ctx.beginPath()\n      // ctx.moveTo(0, y + dy / 2)\n      // ctx.lineTo(width, y + dy / 2)\n      // ctx.stroke()\n      // ctx.closePath()\n\n      ctx.fillStyle = cscale.getColorAt(Math.random()).getStyle()\n      ctx.beginPath()\n      ctx.rect(0, y - 1, width, dy + 1)\n      ctx.fill()\n      ctx.closePath()\n\n      y += dy\n    }\n\n    canvasTexture.texture.needsUpdate = true\n  }\n}\n","mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n  vec3 z = target - origin;\n  if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n  z = normalize(z);\n  vec3 x = cross(up, z);\n  if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n    if (abs(up.z) == 1.0) { z.x += 0.0001; }\n    else { z.z += 0.0001; }\n    x = cross(up, z);\n  }\n  x = normalize(x);\n  vec3 y = cross(z, x);\n  return mat3(x, y, z);\n}\n","mat4 compose(vec3 pos, mat3 rmat, vec3 scale) {\n  return mat4(\n    rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n    rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n    rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n    pos.x, pos.y, pos.z, 1.0\n  );\n}\n","import { Color, DoubleSide, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport mat3LookAt from '../../glsl/mat3-lookat.glsl'\nimport mat4Compose from '../../glsl/mat4-compose.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'directional', params: [0xffffff, 1], props: { position: [0, 10, 0] } }\n  ],\n  wingsScale: [1, 1, 1],\n  wingsWidthSegments: 8,\n  wingsHeightSegments: 8,\n  wingsSpeed: 0.75,\n  wingsDisplacementScale: 1.25,\n  noiseCoordScale: 0.01,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 100,\n  attractionRadius2: 150,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.wingsWidthSegments) || config.wingsWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid wingsWidthSegments ${config.wingsWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uWingsScale = { value: new Vector3(...config.wingsScale) }\n  const uWingsSpeed = { value: config.wingsSpeed }\n  const uWingsDisplacementScale = { value: config.wingsDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uWingsScale, uWingsSpeed, uWingsDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 50, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uWingsSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uWingsSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 2, config.wingsWidthSegments, config.wingsHeightSegments).rotateX(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        WINGS_WIDTH_SEGMENTS: config.wingsWidthSegments,\n        WINGS_HEIGHT_SEGMENTS: config.wingsHeightSegments,\n        WINGS_DX: (2.0 / config.wingsWidthSegments).toFixed(10),\n        WINGS_DZ: (2.0 / config.wingsHeightSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uWingsScale;\n        uniform float uWingsDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n        ${mat3LookAt}\n        ${mat4Compose}\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = compose(vPos.xyz, rmat, (0.5 + vPos.w) * uWingsScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dx = abs(transformed.x);\n        if (dx > 0.0) {\n          float sdx = smoothstep(0.0, 1.0 + WINGS_DX, dx);\n          #if WINGS_HEIGHT_SEGMENTS > 1\n            float dz = transformed.z + 1.0;\n            float sdz = smoothstep(0.0, 2.0 + WINGS_DZ, dz);\n            transformed.y = sin(vVel.w - sdx + sdz) * sdx * uWingsDisplacementScale;\n          #else\n            transformed.y = sin(vVel.w - sdx) * sdx * uWingsDisplacementScale;\n          #endif\n\n          #ifdef COMPUTE_NORMALS\n            #if WINGS_HEIGHT_SEGMENTS > 1\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float sdz1 = smoothstep(0.0, 2.0 + WINGS_DZ, dz + WINGS_DZ);\n              float dvy1 = sin(vVel.w - sdx + sdz1) * sdx * uWingsDisplacementScale - transformed.y;\n              float dvy2 = sin(vVel.w - sdx1 + sdz) * sdx1 * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, dvy1, s * WINGS_DZ);\n              vec3 v2 = vec3(s * WINGS_DX, dvy2, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #else\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float dvy1 = sin(vVel.w - sdx1) * sdx * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, 0.0, s);\n              vec3 v2 = vec3(s * WINGS_DX, dvy1, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #endif  \n          #endif\n        }\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const dummy = new Vector3()\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(config.attractionRadius1 * 2)).toArray(posArray, k)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(0.5)).toArray(velArray, k)\n      velArray[k + 3] = 0\n    }\n  }\n}\n","import { BoxGeometry, BufferGeometry, CapsuleGeometry, Color, ConeGeometry, DoubleSide, Float32BufferAttribute, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshStandardMaterial, OctahedronGeometry, SphereGeometry, Vector2, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport mat3LookAt from '../../glsl/mat3-lookat.glsl'\nimport mat4Compose from '../../glsl/mat4-compose.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 256,\n  bloomStrength: 1.5,\n  bloomRadius: 0.5,\n  bloomThreshold: 0.25,\n  colors: [Math.random() * 0xffffff, Math.random() * 0xffffff, Math.random() * 0xffffff],\n  geometry: 'custom',\n  geometryScale: [1, 1, 1],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'point', params: [0xffffff, 1], props: { position: [0, 0, 0] } },\n    { type: 'point', params: [0xff9060, 0.75], props: { position: [0, -100, -100] } },\n    { type: 'point', params: [0x6090ff, 0.75], props: { position: [0, 100, 100] } }\n  ],\n  materialParams: {},\n  noiseCoordScale: 0.01,\n  noiseIntensity: 0.0025,\n  noiseTimeCoef: 0.0004,\n  attractionRadius1: 150,\n  attractionRadius2: 250,\n  maxVelocity: 0.25\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uScale = { value: new Vector3(...config.geometryScale) }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uMouse = { value: new Vector3() }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uScale, uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uMouse }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let effectComposer\n  let renderPass, bloomPass\n\n  let camera\n  let geometry, material, iMesh\n\n  // const mousePlane = new Plane(new Vector3(0, 0, 1), 0)\n  // const mousePosition = new Vector3()\n  // const raycaster = new Raycaster()\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: false,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera (three) {\n      camera = three.camera\n      camera.position.z = 70\n    },\n    initScene ({ renderer, width, height, camera, scene }) {\n      initScene(scene)\n\n      renderPass = new RenderPass(scene, camera)\n      bloomPass = new UnrealBloomPass(new Vector2(width, height), config.bloomStrength, config.bloomRadius, config.bloomThreshold)\n      effectComposer = new EffectComposer(renderer)\n      effectComposer.addPass(renderPass)\n      effectComposer.addPass(bloomPass)\n    },\n    afterResize ({ width, height }) {\n      if (effectComposer) effectComposer.setSize(width, height)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n      // uMouse.value.copy(mousePosition)\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    },\n    render () {\n      effectComposer.render()\n    }\n    // onPointerMove ({ nPosition }) {\n    //   raycaster.setFromCamera(nPosition, camera)\n    //   camera.getWorldDirection(mousePlane.normal)\n    //   raycaster.ray.intersectPlane(mousePlane, mousePosition)\n    // },\n    // onPointerLeave () {\n    //   mousePosition.set(0, 0, 0)\n    // }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        vel.xyz += (pos.w * 0.75) * grad * uNoiseIntensity;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    switch (config.geometry) {\n      case 'box' :\n        geometry = new BoxGeometry()\n        break\n      case 'capsule' :\n        geometry = new CapsuleGeometry(0.2, 1, 4, 8).rotateX(Math.PI / 2)\n        break\n      case 'cone' :\n        geometry = new ConeGeometry(0.4, 2, 6).rotateX(Math.PI / 2)\n        break\n      case 'octahedron':\n        geometry = new OctahedronGeometry(1, 0).rotateX(Math.PI / 2)\n        break\n      case 'sphere' :\n        geometry = new SphereGeometry(0.5, 8, 8)\n        break\n      default:\n        geometry = customGeometry(1)\n    }\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    let index = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[index++] = i / (WIDTH - 1)\n        gpuUvs[index++] = j / (WIDTH - 1)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n\n    material = new MeshStandardMaterial({\n      metalness: 0.75,\n      roughness: 0.25,\n      side: DoubleSide,\n      ...config.materialParams,\n      onBeforeCompile: shader => {\n        Object.keys(uniforms).forEach(key => {\n          shader.uniforms[key] = uniforms[key]\n        })\n        shader.vertexShader = `\n          uniform sampler2D uTexturePosition;\n          uniform sampler2D uOldTexturePosition;\n          uniform sampler2D uTextureVelocity;\n          uniform vec3 uScale;\n          attribute vec2 gpuUv;\n          varying vec4 vPos;\n          varying vec4 vVel;\n          ${mat3LookAt}\n          ${mat4Compose}\n        ` + shader.vertexShader\n        shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', `\n          vPos = texture2D(uTexturePosition, gpuUv);\n          vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n          vVel = texture2D(uTextureVelocity, gpuUv);\n\n          mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n          mat4 im = compose(vPos.xyz, rmat, (0.5 + vPos.w) * uScale);\n\n          vec3 transformedNormal = objectNormal;\n          mat3 m = mat3(im);\n          transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n          transformedNormal = m * transformedNormal;\n          transformedNormal = normalMatrix * transformedNormal;\n        `)\n        shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n          vec4 mvPosition = modelViewMatrix * im * vec4(transformed, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n        `)\n      }\n    })\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  /**\n   */\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const dummy = new Vector3()\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(config.attractionRadius1 * 2)).toArray(posArray, k)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      dummy.set(0, 0, 0).toArray(velArray, k)\n      velArray[k + 3] = 0\n    }\n  }\n}\n\nfunction customGeometry (size) {\n  const vertices = [\n    { p: [size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [-size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [0, 0, size], n: [0, 1, 0] },\n    { p: [0, -size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, 0, size], n: [1, 0, 0] }\n  ]\n\n  const indexes = [0, 1, 2, 3, 4, 5]\n\n  const positions = []\n  const normals = []\n  for (const vertex of vertices) {\n    positions.push(...vertex.p)\n    normals.push(...vertex.n)\n  }\n\n  const geometry = new BufferGeometry()\n  geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n  geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n  geometry.setIndex(indexes)\n\n  return geometry\n}\n","import { Color, DoubleSide, FogExp2, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport mat3LookAt from '../../glsl/mat3-lookat.glsl'\nimport mat4Compose from '../../glsl/mat4-compose.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.25] },\n    { type: 'directional', params: [0xffffff, 1], props: { position: [0, 0, 50] } }\n  ],\n  fogDensity: 0.01,\n  fishScale: [1, 1, 1],\n  fishWidthSegments: 8,\n  fishSpeed: 1.5,\n  fishDisplacementScale: 0.2,\n  noiseCoordScale: 0.01,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 50,\n  attractionRadius2: 100,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.fishWidthSegments) || config.fishWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid fishWidthSegments ${config.fishWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uFishScale = { value: new Vector3(...config.fishScale) }\n  const uFishSpeed = { value: config.fishSpeed }\n  const uFishDisplacementScale = { value: config.fishDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uFishScale, uFishSpeed, uFishDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 0, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uFishSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uFishSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n      if (config.fogDensity) scene.fog = new FogExp2(config.background, config.fogDensity)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 1, config.fishWidthSegments, 1).rotateY(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        FISH_DZ: (2.0 / config.fishWidthSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uFishScale;\n        uniform float uFishDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n        ${mat3LookAt}\n        ${mat4Compose}\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = compose(vPos.xyz, rmat, (0.5 + vPos.w) * uFishScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dz = transformed.z + 1.0;\n        float sdz = smoothstep(2.0, 0.0, dz);\n        transformed.x += sin(vVel.w + dz * PI * 1.5) * sdz * uFishDisplacementScale;\n\n        #ifdef COMPUTE_NORMALS\n          float dz1 = dz - 0.2;\n          float sdz1 = smoothstep(2.0, 0.0, dz1);\n          float dx1 = sin(vVel.w + dz1 * PI * 1.5) * sdz1 * uFishDisplacementScale - transformed.x;\n          vec3 v1 = vec3(dx1, 0.0, -FISH_DZ);\n          vec3 v2 = vec3(0.0, 1.0, 0.0);\n          transformedNormal = normalize(cross(v1, v2));\n        #endif\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const dummy = new Vector3()\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(config.attractionRadius1 * 2)).toArray(posArray, k)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(0.5)).toArray(velArray, k)\n      velArray[k + 3] = 0\n    }\n  }\n}\n"],"names":["params","domElement","onClick","onEnter","onMove","onLeave","onDragStart","onDragMove","onDragStop","position","Vector2","nPosition","startPosition","lastPosition","delta","obj","removeListeners","addListeners","pointerClick","e","updatePosition","pointerEnter","pointerDown","pointerMove","pointerUp","pointerLeave","rect","options","three","render","cameraCtrl","init","_a","_b","_c","_d","_e","canvas","WebGLRenderer","PerspectiveCamera","OrbitControls","key","resize","Scene","initPointer","timestamp","animate","pointerOptions","pointer","clock","parent","wsize","getCameraViewSize","vFOV","h","commonConfig","config","initLights","scene","lightsConfig","lights","light","lightConfig","AmbientLight","DirectionalLight","PointLight","defaultConfig","points","spline","SplineCurve","velocity","Vector3","velocityTarget","uRatio","uSize","uPoints","uColor","Color","material","plane","hover","threeConfig","OrthographicCamera","geometry","PlaneGeometry","ShaderMaterial","Mesh","width","height","wWidth","i","t1","t2","cos","sin","r1","r2","x","y","colorScale","colors","range","setColors","dummy","getColorAt","color","progress","p","i1","c1","p1","c2","M","rnd","rndFS","MathUtils","WIDTH","COUNT","gpu","dtPosition","dtVelocity","velocityVariable","positionVariable","uTime","uCoordScale","uNoiseIntensity","uPointSize","uPointDecay","uMouse","uMouseDirection","uniforms","mesh","mouseTarget","mindex","changes","mchange","renderer","initGPU","initParticles","wHeight","mchangef","change","event","GPUComputationRenderer","initTextures","psrdnoise","error","BufferGeometry","positions","uvs","index","j","cscale","BufferAttribute","AdditiveBlending","Points","texturePosition","textureVelocity","posArray","velArray","k","kl","w","ctx","texture","CanvasTexture","canvasTexture","useCanvasTexture","drawTexture","camera","dy","ae","ie$1","index$2","uTexturePosition","uOldTexturePosition","uTextureVelocity","uNoiseCoordScale","uMaxVelocity","uAttractionRadius1","uAttractionRadius2","uWingsScale","uWingsSpeed","uWingsDisplacementScale","gpuTexturesUniforms","commonUniforms","iMesh","initScene","HalfFloatType","gpuUvs","mapIndexes","i2","InstancedBufferAttribute","materialParams","DoubleSide","TextureLoader","shader","mat3LookAt","mat4Compose","MeshStandardMaterial","MeshPhongMaterial","MeshBasicMaterial","InstancedMesh","uScale","effectComposer","renderPass","bloomPass","RenderPass","UnrealBloomPass","EffectComposer","BoxGeometry","CapsuleGeometry","ConeGeometry","OctahedronGeometry","SphereGeometry","customGeometry","size","vertices","indexes","normals","vertex","Float32BufferAttribute","uFishScale","uFishSpeed","uFishDisplacementScale","FogExp2"],"mappings":"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"}